name: Build Smartdns rules files
on:
  schedule:
    - cron: "0 */8 * * *"
  push:
    branches:
      - "master"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: "^1.14"

      - name: Set $GOPATH and more variables
        run: |
          echo "RELEASE_NAME=Released on $(date -d "8 hour" -u +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date -d "8 hour" -u +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "GFWLIST_DOMAINS_URL=https://cokebar.github.io/gfwlist2dnsmasq/gfwlist_domain.txt" >> $GITHUB_ENV
          echo "GFWLIST_EXTRAS_DOMAINS_URL=https://raw.githubusercontent.com/pexcn/gfwlist-extras/master/gfwlist-extras.txt" >> $GITHUB_ENV
          echo "GREATFIRE_DOMAINS_URL=https://raw.githubusercontent.com/Loyalsoldier/cn-blocked-domain/release/domains.txt" >> $GITHUB_ENV
          echo "GOOGLE_CN_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_CN_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "REJECT_DOMAINS_URL=https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/reject-list.txt" >> $GITHUB_ENV
          echo "GOPATH=$(dirname $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "$(dirname $GITHUB_WORKSPACE)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Checkout the "master" branch
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Get and add proxy domains into temp-proxy.txt file
        run: |
          mkdir -p ./download/
          cd ./download
          curl -sSL $GFWLIST_DOMAINS_URL | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          curl -sSL $GFWLIST_EXTRAS_DOMAINS_URL | perl -ne 'print if not /^(#|\s)/' >> temp-proxy.txt
          curl -sSL $GREATFIRE_DOMAINS_URL | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' >> temp-proxy.txt
          cat ../mod/myproxylist.txt >> temp-proxy.txt
          sort -u temp-proxy.txt -o temp-proxy.txt
          sed -i -e '/cdn-apple\.com$/d' -e '/^\(.*\.\)\?apple\.com$/d' -e '/\.cn$/d' -e '/^\(.*\.\)\?ntp\./d' temp-proxy.txt
          sed '/[a-zA-Z0-9-]\+\(\.[a-zA-Z0-9-]\+\)\{2,\}/d' temp-proxy.txt > temp-proxy1.txt
          for n in `seq $(sed -n '$=' temp-proxy1.txt)`; do
            domain=$(awk "NR==$n {print; exit}" temp-proxy1.txt)
            sed -i "/.*\.$domain$/d" temp-proxy.txt
          done
          mv -f temp-proxy.txt temp-proxy
          diff ../mod/proxy-need-to-remove.txt ./temp-proxy | awk '/^>/{print $2}' > temp-proxy.txt
          sed -i '/^$/d' temp-proxy.txt

      - name: Get and add reject domains into temp-reject.txt file
        run: |
          cd ./download
          curl -sSL $REJECT_DOMAINS_URL > temp-reject
          diff ../mod/reject-need-to-remove.txt ./temp-reject | awk '/^>/{print $2}' > temp-reject.txt
          cat ../mod/reject-need-to-add.txt >> temp-reject.txt
          sed -i -e '/regex:/d' -e '/^$/d' temp-reject.txt
          sort -u temp-reject.txt -o temp-reject.txt

      - name: Get and add bypass domains into temp-bypass.txt file
        run: |
          cd ./download
          curl -sSL $GOOGLE_CN_DOMAINS_URL > temp-bypass
          curl -sSL $APPLE_CN_DOMAINS_URL >> temp-bypass
          sed -i 's#.*/\(.*\)/.*#\1#' temp-bypass
          cat ./temp-bypass ../mod/bypass-need-to-add.txt > temp-bypass.txt
          sed -i /^$/d' temp-bypass.txt
          sort -u temp-bypass.txt -o temp-bypass.txt

      - name: Generate proxylist.conf
        run: |
          mkdir -p ./new/
          cd ./new
          echo "#Proxy List" > ./proxylist.conf
          cat ../download/temp-proxy.txt | while read line; do
            echo "domain-rules /$line/ -address #6 -nameserver foreign -ipset proxylist -speed-check-mode none" >> ./proxylist.conf
          done

      - name: Generate blocklist.conf
        run: |
          cd ./new
          sed -e 's!\(.*\)!address /\1/#!' -e "1i#Block List" ../download/temp-reject.txt > ./blocklist.conf

      - name: Generate bypasslist.conf
        run: |
          cd ./new
          echo "#Bypass List" > ./bypasslist.conf
          cat ../download/temp-bypass.txt | while read line; do
            echo "domain-rules /$line/ -nameserver foreignUnban -ipset -" >> ./bypasslist.conf
          done

      - name: Generate sha256 hash and diff
        continue-on-error: true
        id: diffResult
        run: |
          cd ./new
          for i in $(ls *); do
            if [ -s $i ]; then
              fileSum=$(sha256sum $i |sed 's# .*##')
              if ! echo "$fileSum ../$i"|sha256sum -c --status; then
                cp -f $i ../$i
                sha256sum $i > ../$i.sha256sum
                echo "::set-output name=status::success"
              fi
            fi
          done

      - name: Git push assets to "master" branch
        continue-on-error: true
        if: steps.diffResult.outputs.status == 'success'
        run: |
          rm -rf download new
          sed -i '/url =/d' ./.git/config
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git add --all
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote set-url --add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git remote set-url --add origin "https://${{ secrets.GITEE_ACCOUNT }}:${{ secrets.GITEE_PASSWORD }}@gitee.com/${{ secrets.GITEE_NAME }}/hosts.git"
          git remote set-url --add origin "https://${{ secrets.CODING_ACCOUNT }}:${{ secrets.CODING_PASSWORD }}@e.coding.net/${{ secrets.CODING_NAME }}/hosts.git"
          git fetch --unshallow origin
          git push -u origin master

      - name: Purge jsdelivr cache
        if: steps.diffResult.outputs.status == 'success'
        run: |
          result=$(curl -s https://purge.jsdelivr.net/gh/o0HalfLife0o/hosts@master/)
          if echo $result |grep -q 'success.*true'; then
            echo "jsdelivr缓存更新成功"
          else
            echo $result
          fi
